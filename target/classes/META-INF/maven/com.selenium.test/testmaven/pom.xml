<project
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.selenium.test</groupId>
	<artifactId>testmaven</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<!-- maven 运行测试name -->
	<name>testmaven</name>
	<url>http://maven.apache.org</url>

	<!-- maven 参数配置，这里引用不同的testng.xml -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<xmlFileName>testng.xml</xmlFileName>
	</properties>


	<!-- maven 引用依赖不同的jar -->
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>

		<!-- 依赖testNg -->
		<!-- https://mvnrepository.com/artifact/org.testng/testng -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>6.14.3</version>
			<scope>test</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>2.44.0</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-server -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-server</artifactId>
			<version>2.44.0</version>
		</dependency>

		<!-- reportNg的依赖包 关联testNg ，这个包的主要作用就是对testng原生报告的美化 -->
		<dependency>
			<groupId>org.uncommons</groupId>
			<artifactId>reportng</artifactId>
			<version>1.1.4</version>
			<exclusions>
				<exclusion>
					<groupId>org.testng</groupId>
					<artifactId>testng</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- 导入本地jar包文件 -->
		<!-- <dependency>
			<groupId>org.uncommons</groupId>
			<artifactId>reportng</artifactId>
			<version>1.1.5</version>
			<scope>system</scope>
			<systemPath>${project.basedir}/lib/reportng-1.1.5.jar</systemPath>
		</dependency> -->
		<dependency>
			<groupId>velocity</groupId>
			<artifactId>velocity</artifactId>
			<version>1.4</version>
		</dependency>
		<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
			<version>4.0</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<!-- 使用maven-compiler-plugin插件可以指定项目源码的jdk版本，编译后的jdk版本，以及编码 -->
				<!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>

			<!-- 添加插件 关联testNg.xml -->
			<plugin>
				<!-- maven-surefire-plugin是maven里执行测试用例的插件，不显示配置就会用默认配置。 -->
				<!-- surefire 插件用来在maven构建生命周期的test phase执行一个应用的单元测试。它会产生两种不同形式的测试结果报告： 
					1）.纯文本 2）.xml文件格式的 默认情况下，这些文件生成在工程的${basedir}/target/surefire-reports，目录下 
					（basedir指的是pom文件所在的目录）。 它可以运行任何testNG,Junit,pojo写的单元测试 -->
				<!-- 添加插件 关联testNg.xml ，surefire插件其实就是一个容器 -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.18.1</version>
				<configuration>
      				<!-- <skipTests>true</skipTests> -->
					<properties>

						<!-- 有疑问 ，加上这段代码就没有多余的report文件了 -->
						<!-- 添加插件,添加ReportNg的监听器，生成TestNg的报告 -->
						<!-- 这里要将defaultListener设置为false，下面配置了两个listener，一个是HTMLReport，用来生成HTML格式的Report， 
							另一个是JUnitXMLReporter，这个是用来生成xml格式的report，用于jekins服务器;practice11.xml即为即将运行的TestNG 
							xml。 然后运行maven test，生成的报告会在target/目录下。 有了报告以后，我们会想，能不能在case执行的过程中将一些重要的log信息也输出到report中呢? 
							testNG中有这样一个类：Reporter，就是专门做这个工作的。 @Test public void test1(){ Reporter.log("This 
							is test1"); } 这样生成的报告就既美观又实用了。除了ReportNG外，我们还可以使用testNG-xslt -->
						<property>
							<name>usedefaultlisteners</name>
							<value>false</value>
						</property>

						<property>
							<name>listener</name>
							<value>org.uncommons.reportng.HTMLReporter,
								org.uncommons.reportng.JUnitXMLReporter</value>
						</property>
					</properties>
					<suiteXmlFiles>
						<suiteXmlFile>testng.xml</suiteXmlFile>
						<!-- <suiteXmlFile>res/${xmlFileName}</suiteXmlFile> -->
						<!--此处testng.xml即为要运行的testng.xml文件 -->
					</suiteXmlFiles>
					<workingDirectory>target/</workingDirectory>
					<!-- Maven运行测试用例时，是通过调用maven的surefire插件并fork一个子进程来执行用例的。 forkmode属性中指明是要为每个测试创建一个进程，还是所有测试在同一个进程中完成。 
						forkMode 可设置值有 “never”， “once”， “always” 和 “pertest”。 pretest： 每一个测试创建一个新进程，为每个测试创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归。 
						once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。 always：在一个进程中并行的运行脚本，Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能， 
						其中 threadCount：执行时，指定可分配的线程数量。只和参数parallel配合使用有效。默认：5。 -->
					<!-- <forkMode>always</forkMode> -->
					<!-- 自2.14版以来，参数forkMode已弃用。使用forkcount和reuseforks代替。使用forkCount参数，创建多个测试进程 -->
					<!-- <forkCount>1</forkCount>
                    <reuseForks>true</reuseForks> -->
				</configuration>
			</plugin>
		</plugins>
	</build>
	<!-- 使用maven 插件运行之后，在target 里面查看测试报告，Html下的index.html 就是reportNg 生成的报告 -->
</project>
